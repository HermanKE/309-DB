-- Creating a new package (schema)
CREATE SCHEMA IF NOT EXISTS assignment;

-- Making a function that returns the details of one row from 'bc_station' based on which station_id you choose 

-- Create or replace an already existing function if there is
-- Function name 'get_station_details'
-- Taking the integer parameter which represents the 'station_id'
CREATE OR REPLACE FUNCTION assignment.get_station_details(p_station_id INTEGER)
RETURNS TABLE (
    station_id INTEGER,
    station_name VARCHAR,
    station_short_name VARCHAR,
    latitude NUMERIC,
    longitude NUMERIC,
    address VARCHAR,
    postal_code VARCHAR,
    contact_phone VARCHAR,
    capacity INTEGER,
    vehicles_available INTEGER,
    docks_available INTEGER,
    is_renting NUMERIC,
    is_returning NUMERIC,
    last_report DATE,
    program_id VARCHAR
)

AS $$
BEGIN
    -- Returning the results of the function query 
    RETURN QUERY
    -- Selecting all of the columns from the row specified of the 'bc_station' table
    SELECT *
    FROM assignment.bc_station
    WHERE assignment.bc_station.station_id = p_station_id;  
END;
$$ LANGUAGE plpgsql;



-- Creating or replacing the function if it already exists
CREATE OR REPLACE FUNCTION assignment.create_account_sp (
    p_account_first_name VARCHAR,
    p_account_last_name VARCHAR,
    p_account_email VARCHAR,
    p_account_password VARCHAR,
    p_account_mobile_phone VARCHAR,
    p_account_street VARCHAR,
    p_account_apartment VARCHAR,
    p_account_city VARCHAR,
    p_account_state_province VARCHAR,
    p_account_postal_code VARCHAR
)
-- Returning the type void (no value), so that it's possible to insert and update the table 
RETURNS void 
LANGUAGE plpgsql
AS $$
BEGIN
END;
$$;

-- Create the purchase_membership_sp function
CREATE OR REPLACE FUNCTION assignment.purchase_membership_sp (
    p_pass_type VARCHAR,
    p_pass_total NUMERIC,
    p_start_time DATE,
    p_end_time DATE,
    p_account_id INTEGER
)
-- Returning the type void (no value), so that it's possible to insert and update the table 
RETURNS void  
LANGUAGE plpgsql
AS $$
BEGIN
END;
$$;

