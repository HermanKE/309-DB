-- Droping procedures if they already exists to avoid duplicates resulting to errors

DROP PROCEDURE IF EXISTS assignment.create_account_sp;
DROP PROCEDURE IF EXISTS assignment.create_bicycle_sp;
DROP PROCEDURE IF EXISTS assignment.create_dock_sp;
DROP PROCEDURE IF EXISTS assignment.create_station_sp;
DROP PROCEDURE IF EXISTS assignment.purchase_membership_sp;
DROP PROCEDURE IF EXISTS assignment.create_country_sp;
DROP PROCEDURE IF EXISTS assignment.create_program_sp;
DROP PROCEDURE IF EXISTS assignment.create_pass_sp;
DROP PROCEDURE IF EXISTS assignment.create_status_sp;
DROP PROCEDURE IF EXISTS assignment.create_trip_sp;


-- Creating the stored procedures within the 'assignment' schema, replacing them if they already exists 

CREATE OR REPLACE PROCEDURE assignment.create_dock_sp (
    p_station_id VARCHAR,
    p_dock_status VARCHAR,
    p_bicycle_id INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_dock(
        station_id, 
        dock_status, 
        bicycle_id
    ) 
    VALUES (
        p_station_id, 
        p_dock_status, 
        p_bicycle_id
    );
	
EXCEPTION
    WHEN OTHERS THEN
		RAISE;
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_account_sp (
    p_account_first_name VARCHAR,
    p_account_last_name VARCHAR,
    p_account_email VARCHAR,
    p_account_password VARCHAR,
    p_account_mobile_phone VARCHAR,
    p_account_street VARCHAR,
    p_account_apartment VARCHAR,
    p_account_city VARCHAR,
    p_account_state_province VARCHAR,
    p_account_postal_code VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_account (
        account_first_name, 
        account_last_name,
        account_email,
        account_password,
        account_mobile_phone,
        account_street,
        account_apartment,
        account_city,
        account_state_province,
        account_postal_code
    )
    VALUES (
        p_account_first_name,
        p_account_last_name,
        p_account_email,
        p_account_password,
        p_account_mobile_phone,
        p_account_street,
        p_account_apartment,
        p_account_city,
        p_account_state_province,
        p_account_postal_code
    )

-- If the account_email value already exist (duplicated emails), it'll raise a conflict and then stop the execution
		ON CONFLICT (account_email) DO NOTHING;

EXCEPTION
    WHEN OTHERS THEN
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_station_sp (
   	p_station_name VARCHAR, 
    p_station_short_name VARCHAR,
    p_latitude NUMERIC, 
    p_longitude NUMERIC,
    p_address VARCHAR,
    p_postal_code VARCHAR,
    p_contact_phone VARCHAR,
    p_capacity INTEGER, 
    p_vehicles_available INTEGER, 
    p_docks_available INTEGER, 
    p_is_renting NUMERIC, 
    p_is_returning NUMERIC,
    p_last_report DATE, 
    p_program_id VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_station (
    station_name,
    station_short_name,
    latitude,
    longitude,
    address,
    postal_code,
    contact_phone,
    capacity,
    vehicles_available,
    docks_available,
    is_renting,
    is_returning,
    last_report,
    program_id
    )
    VALUES (
		p_station_name, 
		p_station_short_name,
		p_latitude, 
		p_longitude,
		p_address,
		p_postal_code,
		p_contact_phone,
		p_capacity, 
		p_vehicles_available, 
		p_docks_available, 
		p_is_renting, 
		p_is_returning,
		p_last_report, 
		p_program_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_bicycle_sp (
   p_bicycle_type VARCHAR,  -- Define type for the parameter
   p_capacity INTEGER,
   p_make VARCHAR,
   p_model VARCHAR,
   p_color VARCHAR,
   p_year_acquired INTEGER,
   p_status VARCHAR,
   p_latitude NUMERIC,
   p_longitude NUMERIC,
   p_current_power NUMERIC,
   p_current_range NUMERIC,
   p_updated DATE
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle (
   		bicycle_type,
		capacity,
		make,
		model,
		color,
		year_acquired,
		status,
		latitude,
		longitude,
		current_power,
		current_range,
		updated 
    )
    VALUES (
		p_bicycle_type,
		p_capacity,
		p_make,
		p_model,
		p_color,
		p_year_acquired,
		p_status,
		p_latitude,
		p_longitude,
		p_current_power,
		p_current_range,
		p_updated 
    );

EXCEPTION
    WHEN OTHERS THEN
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.purchase_membership_sp (
    p_pass_type VARCHAR,
    p_pass_total NUMERIC,
    p_start_time DATE,
    p_end_time DATE,
    p_account_id INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_membership (
        pass_type,
        pass_total,
        start_time,
        end_time,
        account_id
    )
    VALUES (
        p_pass_type,
        p_pass_total,
        p_start_time,
        p_end_time,
        p_account_id
    )

-- Avoiding duplication of memebership based on the account_id column, since it's manually written in
ON CONFLICT (account_id) DO NOTHING; 

EXCEPTION
    WHEN OTHERS THEN
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_country_sp (
    p_country_code VARCHAR (2),
    p_country_formal_name VARCHAR (50),
    p_country_short_name VARCHAR (2)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_country(
        country_code,
        country_formal_name, 
        country_short_name
    ) 
    VALUES (
        p_station_id, 
        p_dock_status, 
        p_bicycle_id
    );
	
EXCEPTION
    WHEN OTHERS THEN
		RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_program_sp (
	p_program_location VARCHAR (25),
	p_program_name VARCHAR (50),
	p_program_short_name VARCHAR(25),
	p_program_url VARCHAR (15),
	p_program_phone_number VARCHAR (15),
	p_program_email VARCHAR (15),
	p_program_timezone VARCHAR (20),
	p_country_code CHAR (2)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_program (
		program_location,
		program_name,
		program_short_name,
		program_url,
		program_phone_number,
		program_email,
		program_timezone,
		country_code
    )
    VALUES (
		p_program_location,
		p_program_name,
		p_program_short_name,
		p_program_url,
		p_program_phone_number,
		p_program_email,
		p_program_timezone,
		country_code
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_pass_sp (
	pass_type VARCHAR (50),
	pass_cost NUMERIC,
	pass_description VARCHAR (255),
	program_id VARCHAR (25)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_pass (
		pass_type,
		pass_cost,
		pass_description,
		program_id
    )
    VALUES (
		p_pass_type,
		p_pass_cost,
		p_pass_description,
		p_program_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_bicycle_status_sp (
	bicycle_status_timestamp DATE,
	bicycle_status_latitude NUMERIC (8, 6),
	bicycle_status_longitude NUMERIC (9, 6),
	bicycle_status_power INTEGER,
	bicycle_status_range NUMERIC (7, 1),
	bicycle_status VARCHAR (15)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle_status (
		bicycle_status_timestamp,
		bicycle_status_latitude,
		bicycle_status_longitude,
		bicycle_status_power,
		bicycle_status_range,
		bicycle_status
    )
    VALUES (
		p_bicycle_status_timestamp,
		p_bicycle_status_latitude,
		p_bicycle_status_longitude,
		p_bicycle_status_power,
		p_bicycle_status_range,
		p_bicycle_status
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_trip_sp (
	bicycle_id INTEGER,
	trip_start_time DATE,
	trip_end_time DATE,
	trip_duration INTEGER,
	trip_distance NUMERIC (7,1),
	trip_cost NUMERIC,
	start_station_id VARCHAR (25),
	end_station_id VARCHAR (25),
	membership_id INTEGER
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle_status (
		bicycle_id,
		trip_start_time,
		trip_end_time,
		trip_duration,
		trip_distance,
		trip_cost,
		start_station_id,
		end_station_id,
		memebership_id
    )
    VALUES (
		p_bicycle_id,
		p_trip_start_time,
		p_trip_end_time,
		p_trip_duration,
		p_trip_distance,
		p_trip_cost,
		p_start_station_id,
		p_end_station_id,
		p_memebership_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;
