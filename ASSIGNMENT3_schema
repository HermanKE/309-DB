-- Creating a new package (schema)
CREATE SCHEMA IF NOT EXISTS assignment;

-- Creating a new package (schema)
CREATE SCHEMA IF NOT EXISTS assignment;

-- Making a function that returns the details of one row from 'bc_station' based on which station_id you choose 

-- Create or replace an already existing function if there is
-- Function name 'get_station_details'
-- Taking the integer parameter which represents the 'station_id'
CREATE OR REPLACE FUNCTION assignment.get_station_details(p_station_id INTEGER)
RETURNS TABLE (
    station_id INTEGER,
    station_name VARCHAR,
    station_short_name VARCHAR,
    latitude NUMERIC,
    longitude NUMERIC,
    address VARCHAR,
    postal_code VARCHAR,
    contact_phone VARCHAR,
    capacity INTEGER,
    vehicles_available INTEGER,
    docks_available INTEGER,
    is_renting NUMERIC,
    is_returning NUMERIC,
    last_report DATE,
    program_id VARCHAR
)

AS $$
BEGIN
    -- Returning the results of the function query 
    RETURN QUERY
    -- Selecting all of the columns from the row specified of the 'bc_station' table
    SELECT *
    FROM assignment.bc_station
    WHERE assignment.bc_station.station_id = p_station_id;  
END;
$$ LANGUAGE plpgsql;

-- Drop obsolete or redundant procedures
DROP PROCEDURE IF EXISTS assignment.create_account_sp;
DROP PROCEDURE IF EXISTS assignment.create_bicycle_sp;
DROP PROCEDURE IF EXISTS assignment.create_dock_sp;
DROP PROCEDURE IF EXISTS assignment.create_station_sp;
DROP PROCEDURE IF EXISTS assignment.purchase_membership_sp;



-- Creating the necessary tables before creating the procedures

CREATE TABLE IF NOT EXISTS assignment.bc_dock (
  station_id VARCHAR NOT NULL,
  dock_id SERIAL PRIMARY KEY,
  dock_status VARCHAR NOT NULL,
  bicycle_id INTEGER DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS assignment.bc_account (
  account_id SERIAL PRIMARY KEY,
  account_first_name VARCHAR NOT NULL,
  account_last_name VARCHAR NOT NULL,
  account_email VARCHAR UNIQUE NOT NULL,
  account_password VARCHAR NOT NULL,
  account_mobile_phone VARCHAR NOT NULL,
  account_street VARCHAR,
  account_apartment VARCHAR,
  account_city VARCHAR NOT NULL,
  account_state_province VARCHAR NOT NULL,
  account_postal_code VARCHAR NOT NULL
);

CREATE TABLE IF NOT EXISTS assignment.bc_bicycle (
    bicycle_id SERIAL PRIMARY KEY,
    bicycle_type VARCHAR NOT NULL,
    capacity INTEGER,
    make VARCHAR,
    model VARCHAR,
    color VARCHAR,
    year_acquired INTEGER,
    status VARCHAR NOT NULL,
    latitude INTEGER,
    longitude INTEGER,
    current_power NUMERIC,
    current_range NUMERIC,
    updated DATE
);


CREATE TABLE IF NOT EXISTS assignment.bc_station (
	station_id SERIAL PRIMARY KEY, 
    station_name VARCHAR NOT NULL,
    station_short_name VARCHAR,
    latitude NUMERIC NOT NULL,
    longitude NUMERIC NOT NULL,
    address VARCHAR,
    postal_code VARCHAR,
    contact_phone VARCHAR,
    capacity INTEGER NOT NULL,
    vehicles_available INTEGER NOT NULL,
    docks_available INTEGER NOT NULL,
    is_renting NUMERIC NOT NULL,
    is_returning NUMERIC NOT NULL,
    last_report DATE NOT NULL,
    program_id VARCHAR NOT NULL
);


CREATE TABLE IF NOT EXISTS assignment.bc_membership (
  	membership_id SERIAL PRIMARY KEY,
	pass_type VARCHAR NOT NULL,
    pass_total NUMERIC NOT NULL,
    start_time DATE NOT NULL,
    end_time DATE NOT NULL,
    account_id INTEGER NOT NULL,

-- Ensuring that every value in the column 'account_id' in 'bc_membership' table must also exist in the column 'account_id' in 'bc_account'table 
FOREIGN KEY (account_id) REFERENCES assignment.bc_account(account_id)  -- Foreign key relationship

);

CREATE TABLE IF NOT EXISTS assignment.bc_country (
	country_code CHAR (2) NOT NULL,
	country_formal_name VARCHAR (50) NOT NULL,
	country_short_name VARCHAR (25)
);

CREATE TABLE IF NOT EXISTS assignment.bc_program (
	program_id SERIAL PRIMARY KEY,
	program_location VARCHAR (25),
	program_name VARCHAR (50) NOT NULL,
	program_short_name VARCHAR(25),
	program_url VARCHAR (15),
	program_phone_number VARCHAR (15),
	program_email VARCHAR (15),
	program_timezone VARCHAR (20),
	country_code CHAR (2) NOT NULL
);

CREATE TABLE IF NOT EXISTS assignment.bc_pass(
	pass_type VARCHAR (50),
	pass_cost NUMERIC,
	pass_description VARCHAR (255),
	program_id VARCHAR (25),
	pass_id SERIAL PRIMARY KEY,

-- Making sure that the values in column 'pass_id' in the 'bc_pass' table also corresponds with 'account_id'
	FOREIGN KEY (pass_id) REFERENCES assignment.bc_pass (account_id)  -- Foreign key relationship
);

CREATE TABLE IF NOT EXISTS assignment.bc_bicycle_status(
	bicycle_id INTEGER,
	bicycle_status_timestamp DATE,
	bicycle_status_latitude NUMERIC (8, 6),
	bicycle_status_longitude NUMERIC (9, 6),
	bicycle_status_power INTEGER,
	bicycle_status_range NUMERIC (7, 1),
	bicycle_status VARCHAR (15)
);

CREATE TABLE IF NOT EXISTS assignment.bc_trip (
	trip_id SERIAL PRIMARY KEY,
	bicycle_id INTEGER,
	trip_start_time DATE,
	trip_end_time DATE,
	trip_duration INTEGER,
	trip_distance NUMERIC (7,1),
	trip_cost NUMERIC,
	start_station_id VARCHAR (25),
	end_station_id VARCHAR (25),
	memebership_id INTEGER
);

-- Droping procedures if they already exists to avoid duplicates resulting to errors

DROP PROCEDURE IF EXISTS assignment.create_account_sp;
DROP PROCEDURE IF EXISTS assignment.create_bicycle_sp;
DROP PROCEDURE IF EXISTS assignment.create_dock_sp;
DROP PROCEDURE IF EXISTS assignment.create_station_sp;
DROP PROCEDURE IF EXISTS assignment.purchase_membership_sp;
DROP PROCEDURE IF EXISTS assignment.create_country_sp;
DROP PROCEDURE IF EXISTS assignment.create_program_sp;
DROP PROCEDURE IF EXISTS assignment.create_pass_sp;
DROP PROCEDURE IF EXISTS assignment.create_status_sp;
DROP PROCEDURE IF EXISTS assignment.create_trip_sp;


-- Creating the stored procedures within the 'assignment' schema, replacing them if they already exists 

CREATE OR REPLACE PROCEDURE assignment.create_dock_sp (
    p_station_id VARCHAR,
    p_dock_status VARCHAR,
    p_bicycle_id INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_dock(
        station_id, 
        dock_status, 
        bicycle_id
    ) 
    VALUES (
        p_station_id, 
        p_dock_status, 
        p_bicycle_id
    );
	
EXCEPTION
    WHEN OTHERS THEN
		RAISE;
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_account_sp (
    p_account_first_name VARCHAR,
    p_account_last_name VARCHAR,
    p_account_email VARCHAR,
    p_account_password VARCHAR,
    p_account_mobile_phone VARCHAR,
    p_account_street VARCHAR,
    p_account_apartment VARCHAR,
    p_account_city VARCHAR,
    p_account_state_province VARCHAR,
    p_account_postal_code VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_account (
        account_first_name, 
        account_last_name,
        account_email,
        account_password,
        account_mobile_phone,
        account_street,
        account_apartment,
        account_city,
        account_state_province,
        account_postal_code
    )
    VALUES (
        p_account_first_name,
        p_account_last_name,
        p_account_email,
        p_account_password,
        p_account_mobile_phone,
        p_account_street,
        p_account_apartment,
        p_account_city,
        p_account_state_province,
        p_account_postal_code
    )

-- If the account_email value already exist (duplicated emails), it'll raise a conflict and then stop the execution
		ON CONFLICT (account_email) DO NOTHING;

EXCEPTION
    WHEN OTHERS THEN
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_station_sp (
   	p_station_name VARCHAR, 
    p_station_short_name VARCHAR,
    p_latitude NUMERIC, 
    p_longitude NUMERIC,
    p_address VARCHAR,
    p_postal_code VARCHAR,
    p_contact_phone VARCHAR,
    p_capacity INTEGER, 
    p_vehicles_available INTEGER, 
    p_docks_available INTEGER, 
    p_is_renting NUMERIC, 
    p_is_returning NUMERIC,
    p_last_report DATE, 
    p_program_id VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_station (
    station_name,
    station_short_name,
    latitude,
    longitude,
    address,
    postal_code,
    contact_phone,
    capacity,
    vehicles_available,
    docks_available,
    is_renting,
    is_returning,
    last_report,
    program_id
    )
    VALUES (
		p_station_name, 
		p_station_short_name,
		p_latitude, 
		p_longitude,
		p_address,
		p_postal_code,
		p_contact_phone,
		p_capacity, 
		p_vehicles_available, 
		p_docks_available, 
		p_is_renting, 
		p_is_returning,
		p_last_report, 
		p_program_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;


CREATE OR REPLACE PROCEDURE assignment.create_bicycle_sp (
   p_bicycle_type VARCHAR,  -- Define type for the parameter
   p_capacity INTEGER,
   p_make VARCHAR,
   p_model VARCHAR,
   p_color VARCHAR,
   p_year_acquired INTEGER,
   p_status VARCHAR,
   p_latitude NUMERIC,
   p_longitude NUMERIC,
   p_current_power NUMERIC,
   p_current_range NUMERIC,
   p_updated DATE
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle (
   		bicycle_type,
		capacity,
		make,
		model,
		color,
		year_acquired,
		status,
		latitude,
		longitude,
		current_power,
		current_range,
		updated 
    )
    VALUES (
		p_bicycle_type,
		p_capacity,
		p_make,
		p_model,
		p_color,
		p_year_acquired,
		p_status,
		p_latitude,
		p_longitude,
		p_current_power,
		p_current_range,
		p_updated 
    );

EXCEPTION
    WHEN OTHERS THEN
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.purchase_membership_sp (
    p_pass_type VARCHAR,
    p_pass_total NUMERIC,
    p_start_time DATE,
    p_end_time DATE,
    p_account_id INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_membership (
        pass_type,
        pass_total,
        start_time,
        end_time,
        account_id
    )
    VALUES (
        p_pass_type,
        p_pass_total,
        p_start_time,
        p_end_time,
        p_account_id
    )

-- Avoiding duplication of memebership based on the account_id column, since it's manually written in
ON CONFLICT (account_id) DO NOTHING; 

EXCEPTION
    WHEN OTHERS THEN
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_country_sp (
    p_country_code VARCHAR (2),
    p_country_formal_name VARCHAR (50),
    p_country_short_name VARCHAR (2)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_country(
        country_code,
        country_formal_name, 
        country_short_name
    ) 
    VALUES (
        p_station_id, 
        p_dock_status, 
        p_bicycle_id
    );
	
EXCEPTION
    WHEN OTHERS THEN
		RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_program_sp (
	p_program_location VARCHAR (25),
	p_program_name VARCHAR (50),
	p_program_short_name VARCHAR(25),
	p_program_url VARCHAR (15),
	p_program_phone_number VARCHAR (15),
	p_program_email VARCHAR (15),
	p_program_timezone VARCHAR (20),
	p_country_code CHAR (2)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_program (
		program_location,
		program_name,
		program_short_name,
		program_url,
		program_phone_number,
		program_email,
		program_timezone,
		country_code
    )
    VALUES (
		p_program_location,
		p_program_name,
		p_program_short_name,
		p_program_url,
		p_program_phone_number,
		p_program_email,
		p_program_timezone,
		country_code
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_pass_sp (
	pass_type VARCHAR (50),
	pass_cost NUMERIC,
	pass_description VARCHAR (255),
	program_id VARCHAR (25)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_pass (
		pass_type,
		pass_cost,
		pass_description,
		program_id
    )
    VALUES (
		p_pass_type,
		p_pass_cost,
		p_pass_description,
		p_program_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_bicycle_status_sp (
	bicycle_status_timestamp DATE,
	bicycle_status_latitude NUMERIC (8, 6),
	bicycle_status_longitude NUMERIC (9, 6),
	bicycle_status_power INTEGER,
	bicycle_status_range NUMERIC (7, 1),
	bicycle_status VARCHAR (15)
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle_status (
		bicycle_status_timestamp,
		bicycle_status_latitude,
		bicycle_status_longitude,
		bicycle_status_power,
		bicycle_status_range,
		bicycle_status
    )
    VALUES (
		p_bicycle_status_timestamp,
		p_bicycle_status_latitude,
		p_bicycle_status_longitude,
		p_bicycle_status_power,
		p_bicycle_status_range,
		p_bicycle_status
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

CREATE OR REPLACE PROCEDURE assignment.create_trip_sp (
	bicycle_id INTEGER,
	trip_start_time DATE,
	trip_end_time DATE,
	trip_duration INTEGER,
	trip_distance NUMERIC (7,1),
	trip_cost NUMERIC,
	start_station_id VARCHAR (25),
	end_station_id VARCHAR (25),
	membership_id INTEGER
)

LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO assignment.bc_bicycle_status (
		bicycle_id,
		trip_start_time,
		trip_end_time,
		trip_duration,
		trip_distance,
		trip_cost,
		start_station_id,
		end_station_id,
		memebership_id
    )
    VALUES (
		p_bicycle_id,
		p_trip_start_time,
		p_trip_end_time,
		p_trip_duration,
		p_trip_distance,
		p_trip_cost,
		p_start_station_id,
		p_end_station_id,
		p_memebership_id
    );


EXCEPTION
    WHEN OTHERS THEN
	RAISE;
END;
$$;

-- Call the procedure to create an account
CALL assignment.create_account_sp(
    'August',  -- p_account_first_name
    'Sjo',  -- p_account_last_name
    'augist.sjo@example.com',  -- p_account_email
    'pasword111',  -- p_account_password
    '123-45-678',  -- p_account_mobile_phone
    'Volleveien',  -- p_account_street
    '12b',  -- p_account_apartment
    'Oslo',  -- p_account_city
    'Eksempel',  -- p_account_state_province
    '7844'  -- p_account_postal_code
);

--Call the procedure to create a station
CALL assignment.create_station_sp(
    'Furuset Station',  -- p_station_name
    'FURU',  -- p_station_short_name
    52.1437,  -- p_latitude
    -71.0682,  -- p_longitude
    'Furulia 28A',  -- p_address
    '8064',  -- p_postal_code
    '555-55-555',  -- p_contact_phone
    30,  -- p_capacity
    15,  -- p_vehicles_available
    15,  -- p_docks_available
    4,  -- p_is_renting
    1,  -- p_is_returning
    CURRENT_DATE,  -- p_last_report
    'PROG002'  -- p_program_id
);

-- Call the procedure to create a bicycle
CALL assignment.create_bicycle_sp(
    'Classic',  -- p_bicycle_type
    7,  -- p_capacity
    'MTM',  -- p_make
    'Bicycle 4.0',  -- p_model
    'White',  -- p_color
    2024,  -- p_year_acquired
    'Available',  -- p_status
    48,  -- p_latitude
    -34,  -- p_longitude
    60,  -- p_current_power
    100,  -- p_current_range
    CURRENT_DATE  -- p_updated
);

-- Call the procedure to create a dock
CALL assignment.create_dock_sp(
    '1',  -- p_station_id
    'Available',  -- p_dock_status
    NULL  -- p_bicycle_id
);


CALL assignment.purchase_membership_sp(
    'Monthly',  -- p_pass_type
    50, -- p_pass_total
    CURRENT_DATE,  -- p_start_time
    (CURRENT_DATE + INTERVAL '1 month')::DATE,  -- p_end_time
    26  -- p_account_id
);


-- Drop the trigger if it already exists
DROP TRIGGER IF EXISTS log_bicycle_count_trigger ON assignment.bc_bicycle;
DROP TRIGGER IF EXISTS update_last_report_trigger ON assignment.bc_bicycle;

-- Creating or replacing the function if it already exists for logging the bicycle count in the 'assignment' schema
CREATE OR REPLACE FUNCTION assignment.log_bicycle_count()
RETURNS TRIGGER AS $$

-- Declaring the variable that is going to be used
DECLARE
    bicycle_count INTEGER;
BEGIN
    -- Counting the number of all the bicycles in the table
    SELECT COUNT(*) INTO bicycle_count
    FROM assignment.bc_bicycle;
    
    -- Logging the bicycle count, returning this message
    RAISE NOTICE 'Total number of bicycles: %', bicycle_count;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create the statement-level trigger to execute the trigger function
-- When a row is added, updated, or deleted to the 'bc_bicycle' table, it'll trigger the function

CREATE TRIGGER log_bicycle_count_trigger
AFTER INSERT OR UPDATE OR DELETE ON assignment.bc_bicycle
FOR EACH STATEMENT
EXECUTE FUNCTION assignment.log_bicycle_count();

-- Creating or replacing the function if it already exists for updating the date in the column 'last_report' in table 'bc_station' in the 'assignment' schema
-- It'll update it to the current date even if the date is originally inserted manually 
CREATE OR REPLACE FUNCTION assignment.update_last_report()
RETURNS TRIGGER AS $$
BEGIN
    -- Update the last_report column to the current date
    NEW.last_report := CURRENT_DATE;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Creating the row-level trigger to execute the trigger function
CREATE TRIGGER update_last_report_trigger
BEFORE INSERT ON assignment.bc_station
FOR EACH ROW
EXECUTE FUNCTION assignment.update_last_report();

